function kda
% Main function
% This program analyzes paw tracking data generated by CLARA to extract
% kinematic features and compute session level means for mice performing
% a skilled reaching task.
%
% Required add-ons (already included in private folder):
%     interparc by John D'Errico: https://www.mathworks.com/matlabcentral/fileexchange/34874-interparc
%     arclength by John D'Errico: https://www.mathworks.com/matlabcentral/fileexchange/34871-arclength

%% Create GUI
% turn off TEX interpreter
set(0, 'DefaulttextInterpreter', 'none');

% create main window
window = figure( ...
    'Name', 'Kinematic Data Analysis', ...
    'NumberTitle', 'off', ...
    'Color', '#DCFFE6', ...
    'MenuBar', 'none', ...
    'HandleVisibility','off');
movegui(window,'center')

% create objects to store text
% data summary handle:
dHand = uicontrol(window, "Style", 'text', ...
    'BackgroundColor', '#DCFFE6', ...
    'Position', [130 75 300 300]);
% output directory handle:
outHand = uicontrol(window, "Style", 'text', ...
    'BackgroundColor', '#DCFFE6', ...
    'Position', [14 20 535 22]);

% matlab 3d directory handle:
matHand = uicontrol(window, "Style", 'text', ...
    'BackgroundColor', '#DCFFE6', ...
    'Position', [14 45 535 22]);

% text to display on window
opening_str = {'','','','Extracts Kinematic Features from CLARA-Generated Datasets', ...
    '', 'Version 1.1', '', 'Navigate using Toolbar'};
set(dHand,'String', opening_str)

% file menu
menu_file = uimenu(window, 'Label', 'File');
uimenu(menu_file, 'Text', 'Load Raw Data', 'Callback', @FileLoadData)
uimenu(menu_file, 'Text', 'Load KDA File(s)', 'Callback', @FileLoadSavedSession)
uimenu(menu_file, 'Text', 'Save Session', 'Callback', @FileSaveSession)
uimenu(menu_file, 'Text', 'Change MATLAB 3D Directory','Callback', @FileChangeMatPath)
uimenu(menu_file, 'Text', 'Change Output Directory','Callback', @FileChangeOutPath)
uimenu(menu_file, 'Text', 'Quit', 'Callback', @FileQuit)

% analysis menu
menu_analysis = uimenu(window, 'Label', 'Analysis');
uimenu(menu_analysis, 'Text', 'Extract Kinematics', 'Callback', @AnalysisExtractKinematics)
uimenu(menu_analysis, 'Text', 'Compare Learning Phases', 'Callback', @AnalysisComparePhases)

% export menu
menu_export = uimenu(window, 'Label', 'Export');
uimenu(menu_export, 'Text', 'Session Means', 'Callback', @ExportSessionMeans)
uimenu(menu_export, 'Text', 'KDA File(s) to Base Workspace', 'Callback', @ExportKdaToBase)

% plot menu
menu_plot = uimenu(window, 'Label', 'Plot');
uimenu(menu_plot, 'Text', 'Individual Trajectories', 'Callback', @PlotIndivTraj)

% initialize data for nested functions
data = [];
UI = struct;

% checks for file containing matlab 3D path (this txt file is created the first
% time a user defines the path
if isfile('rawDataPath.txt')
    fileID = fopen('rawDataPath.txt','r');
    UI.Mat3Dpath = fscanf(fileID, '%s');

    % update displayed matlab 3d path
    string = ['MATLAB 3D directory: ' UI.Mat3Dpath];
    set(matHand, 'String', string)
end

%% File Menu

% UI navigate to dirs, UI select mice, load raw data
    function FileLoadData(varargin)
        %add to session or new session
        if  ~isempty(data)
            quest = 'Would you like to start a new session or add the the current session?';
            dlgtitle = 'New Session or Add to Session';
            btn1 = 'New Session';
            btn2 = 'Add to current session';
            defbtn = 'Add to current session';
            answer = questdlg(quest,dlgtitle,btn1,btn2,defbtn);

            % if new session, delete data
            if strcmpi(answer,btn1)
                data = [];
            end
        end

        if isfield(UI,'Mat3Dpath') %if matlab 3d path was autopopulated
            % if path does not lead to exisitng directory, prompt for new path
            if ~isfolder(UI.Mat3Dpath)
                % user naviagate to Matlab_3D folder
                msg1 = msgbox('Select Matlab_3D Folder');
                uiwait(msg1)
                UI.Mat3Dpath = uigetdir();
                % if canceled then return
                if UI.Mat3Dpath == 0
                    warning('User cancelled: No Matlab_3D folder selected.')
                    return
                end
                % save path in text file
                fID = fopen('rawDataPath.txt','w');
                fprintf(fID,'%s',UI.Mat3Dpath);
            end

        else % need to prompt user for matlab 3d path
            % user naviagate to Matlab_3D folder
            msg1 = msgbox('Select Matlab_3D Folder');
            uiwait(msg1)
            UI.Mat3Dpath = uigetdir();
            % if canceled then return
            if UI.Mat3Dpath == 0
                warning('User cancelled: No Matlab_3D folder selected.')
                return
            end
            % save path in text file
            fID = fopen('rawDataPath.txt','w');
            fprintf(fID,'%s',UI.Mat3Dpath);
        end

        % user navigate to curator folder
        msg2 = msgbox('Select Curators Folder');
        uiwait(msg2)
        UI.CurPath = uigetdir();
        %if canceled then return
        if UI.CurPath == 0
            warning('User cancelled: No Curator folder selected.')
            return
        end

        [mouseIDs,CURdir] = GetMouseIDs(UI.CurPath);
        [mouseIDs,indx] = SelectMice(mouseIDs);
        % index selected mice from curator directory struct
        CURdir = CURdir(indx);

        % datacount should be zero if nothing loaded
        datacount = length(data);

        % create data structures for mice to process
        for i = 1:length(mouseIDs)
            data{datacount+i} = struct('MouseID',mouseIDs(i));
        end

        data = LoadRawData(data,UI.Mat3Dpath,CURdir);
        DataSummary(data,dHand) %update
    end

    function FileLoadSavedSession(varargin)
        %add to session or new session
        if  ~isempty(data)
            quest = 'Would you like to start a new session or add the the current session?';
            dlgtitle = 'New Session or Add to Session';
            btn1 = 'New Session';
            btn2 = 'Add to current session';
            defbtn = 'Add to current session';
            answer = questdlg(quest,dlgtitle,btn1,btn2,defbtn);

            % if new session, delete data
            if strcmpi(answer,btn1)
                data = [];
            end
        end

        datacount = length(data);

        %user navigate to .kda file(s)
        [file, path] = uigetfile('*.kda', 'Select Session File','MultiSelect','on');
        if ~iscell(file)
            if file == 0
                warning('User cancelled: No session folder selected.')
                return
            end
            datacount = datacount+1;
            data{datacount} = load(fullfile(path,file),'-mat');
        elseif iscell(file)
            for i = 1:length(file)
                datacount = datacount+1;
                data{datacount} = load(fullfile(path,file{i}),'-mat');
            end
        end
        DataSummary(data,dHand)
    end

    function FileSaveSession(varargin)
        if isempty(data)
            err1 = msgbox('No data to save.');
            uiwait(err1)
            return
        end

        % check if output folder path has been not yet been defined
        if ~isfield(UI,'OutPath')
            FileChangeOutPath()
        end

        for i = 1:length(data)
            SaveKdaFile(data{i},UI.OutPath)
        end
    end

    function FileChangeMatPath(varargin)
         % user navigate to matlab 3d directory
        UI.Mat3Dpath = uigetdir();
        if UI.Mat3Dpath == 0
            warning('User cancelled: MATLAB 3D folder not selected.')
            return
        end
        % update displayed output path
        str = ['MATLAB 3D directory: ' UI.Mat3Dpath];
        set(matHand, 'String', str)
    end


    function FileChangeOutPath(varargin)
        % user navigate to output directory
        UI.OutPath = uigetdir();
        if UI.OutPath == 0
            warning('User cancelled: No output folder selected.')
            return
        end
        % update displayed output path
        str = ['Output directory: ' UI.OutPath];
        set(outHand, 'String', str)
    end

    function FileQuit(varargin)
        close ('all','hidden')
    end

%% Analysis Menu
    function AnalysisExtractKinematics(varargin)
        % check that mice are loaded and have correct status
        if isempty(data)
            err1 = msgbox(['No data to process. Please load raw ' ...
                'data before extracting kinematics.']);
            uiwait(err1)
            return
        elseif any(cellfun(@(x) ~strcmp(x.Status,'Raw'), data))
            err2 = msgbox(['Data does not have correct status. ' ...
                'Please load raw data before extracting kinematics.']);
            uiwait(err2)
            return
        end

        % check if output folder path has been not yet been defined
        if ~isfield(UI,'OutPath')
            FileChangeOutPath()
        end

        UI = UserSelections(UI,'ExtractKinematics');
        data = PreprocessMice(data,UI);
        DataSummary(data,dHand)
    end

    function AnalysisComparePhases(varargin)
        %         % check that mice are loaded and have correct status
        %         if isempty(data)
        %             err1 = msgbox(['No data to compare. Please load data with ' ...
        %                 'kinematics extracted before comparing learning phases.']);
        %             uiwait(err1)
        %             return
        %         elseif any(cellfun(@(x) ~strcmp(x.Status,'KinematicsExtracted'),data))
        %             err2 = msgbox(['Data does not have correct status. ' ...
        %                 'Please extract kinematics before exporting session means.']);
        %             uiwait(err2)
        %             return
        %         end

        % user navigate to kda folder
        msg4 = msgbox('Select folder containing kda files to compare');
        uiwait(msg4)
        kdaPath = uigetdir();
        %if canceled then return
        if kdaPath == 0
            warning('User cancelled: No folder selected.')
            return
        end
        
        % check if output folder path has been not yet been defined
        if ~isfield(UI,'OutPath')
            FileChangeOutPath()
        end

        %% FIX THIS TO USE METADATA
        % user enter learning phase indentifiers
        prompt = sprintf(['Enter the identifier for learning phase 1. ' ...
            'This should be a string within the mouse ID that is ' ...
            'unique to the learning phase. Ex: pre']);
        dlgtitle = 'Learning Phase Identifier';
        dims = [1 60];
        definput = {''};
        phaseID{1} = inputdlg(prompt,dlgtitle,dims,definput);

        prompt = sprintf(['Enter the identifier for learning phase 2. ' ...
            'This should be a string within the mouse ID that is ' ...
            'unique to the learning phase. Ex: post']);
        dlgtitle = 'Learning Phase Identifier';
        dims = [1 60];
        definput = {''};
        phaseID{2} = inputdlg(prompt,dlgtitle,dims,definput);

        % opt to group by cohort
        quest = 'Would you like to group by cohort?';
        dlgtitle = 'Group Option';
        yes = 'Yes';
        no = 'No';
        defbtn = 'Yes';
        answer = questdlg(quest,dlgtitle,yes,no,defbtn);

        % find files belonging to each phase and compare
        phaseLists = GroupByPhase(phaseID,kdaPath);
        corrData = CompareLearningPhases(phaseLists,kdaPath);

        % ui select mice to group
        if strcmpi(answer,yes)
            % user input number of cohorts
            prompt = {'Enter the number of cohorts:'};
            dlgtitle = 'Number of Cohorts';
            dims = [1 35];
            definput = {'2'};
            num_cohorts = str2double(inputdlg(prompt,dlgtitle,dims,definput));
            [cohort, cohortID] = SelectCohorts(corrData,num_cohorts);

        elseif strcmpi(answer,no)
            % single cohort
            cohort{1} = corrData;
            % name cohort
            prompt = sprintf('Enter the identifier for cohort 1');
            dlgtitle = 'Input Cohort Name';
            dims = [1 35];
            definput = {''};
            cohortID{1} = inputdlg(prompt,dlgtitle,dims,definput);
        end

        OutputPhaseCorrelations(cohort,cohortID,UI.OutPath)

    end


%% Export Menu
    function ExportSessionMeans(varargin)
        % check that mice are loaded and have correct status
        if isempty(data)
            err1 = msgbox(['No data to process. Please load data with ' ...
                'kinematics extracted before exporting session means.']);
            uiwait(err1)
            return
        elseif any(cellfun(@(x) ~strcmp(x.Status,'KinematicsExtracted'),data))
            err2 = msgbox(['Data does not have correct status. ' ...
                'Please extract kinematics before exporting session means.']);
            uiwait(err2)
            return
        end

        % check if output folder path has been not yet been defined
        if ~isfield(UI,'OutPath')
            FileChangeOutPath()
        end

        quest = 'Would you like to group by cohort?';
        dlgtitle = 'Group Option';
        yes = 'Yes';
        no = 'No';
        defbtn = 'Yes';
        answer = questdlg(quest,dlgtitle,yes,no,defbtn);

        % ui select mice to group
        if strcmpi(answer,yes)
            % user input number of cohorts
            prompt = {'Enter the number of cohorts:'};
            dlgtitle = 'Number of Cohorts';
            dims = [1 35];
            definput = {'2'};
            num_cohorts = str2double(inputdlg(prompt,dlgtitle,dims,definput));
            [cohort, cohortID] = SelectCohorts(data,num_cohorts);

        elseif strcmpi(answer,no)
            % single cohort
            cohort{1} = data;
            % name cohort
            prompt = sprintf('Enter the identifier for cohort 1');
            dlgtitle = 'Input Cohort Name';
            dims = [1 35];
            definput = {''};
            cohortID{1} = inputdlg(prompt,dlgtitle,dims,definput);
        end

        OutputSessionMeans(cohort,cohortID,UI.OutPath)

    end

    function ExportKdaToBase(varargin)
        % chose kda files to export and load
        [file, path] = uigetfile('*.kda', 'Select Session File','MultiSelect','on');
        if ~iscell(file)
            if file == 0
                warning('User cancelled: No session folder selected.')
                return
            end
            exportdata = load(fullfile(path,file),'-mat');
        elseif iscell(file)
            for i = 1:length(file)
                exportdata{i} = load(fullfile(path,file{i}),'-mat');
            end
        end
        assignin('base',"kdaData",exportdata) %export to base
        str = 'Data exported to Base workspace in kdaData.';
        disp(str)
    end

%% plot menu

    function PlotIndivTraj(varargin)
        % check that mice are loaded and have correct status
        if isempty(data)
            err1 = msgbox(['No data to process. Load data with ' ...
                'kinematics extracted before plotting trajectories.']);
            uiwait(err1)
            return
        elseif any(cellfun(@(x) ~strcmp(x.Status,'KinematicsExtracted'),data))
            err2 = msgbox(['Data does not have correct status. ' ...
                'Extract kinematics before plotting trajectories.']);
            uiwait(err2)
            return
        end

        % check if output folder path has been not yet been defined
        if ~isfield(UI,'OutPath')
            FileChangeOutPath()
        end

        % create folders
        folder = 'Individual Reaches';
        folder_path = fullfile(UI.OutPath,folder);
        if ~exist(folder_path,'dir')
            mkdir(folder_path)
        end

        f = figure;
        ax = axes('Parent',f);

        plt = plot(ax,0,0);


        for i = 1:length(data)
            % create folder for each mouse
            folder = data{i}.MouseID;
            subfolder_path = fullfile(folder_path,folder);
            if ~exist(subfolder_path,'dir')
                mkdir(subfolder_path)
            end

            for j = 1:length(data{i}.Sessions)
                % create folder for each session
                folder = data{i}.Sessions(j).SessionID{1};
                subfolder_path = fullfile(subfolder_path,folder);
                if ~exist(subfolder_path,'dir')
                    mkdir(subfolder_path)
                end
            end

            for k = 1:length(data{i}.Sessions(j).InitialToMax)
                XData = data{i}.Sessions(j).InitialToMax(k).InterpolatedHand(:,1);
                YData = data{i}.Sessions(j).InitialToMax(k).InterpolatedHand(:,2);
                set(plt,'XData',XData,'YData',YData)

                %plot(ax,XData,YData)
                set(ax,'YDir','reverse')
                xlim([-20 10])
                ylim([-10 5])
                drawnow

                filename = num2str(k);
                path = fullfile(subfolder_path,filename);
                exportgraphics(ax,[path '.eps'])
                exportgraphics(ax,[path '.png'])
            end

        end

    end

end
